// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model BMWCode {
  id          String   @id @default(cuid())
  code        String   @unique
  description String
  severity    String   // "critical", "moderate", "minor"
  system      String   // "engine", "transmission", "abs", etc.
  causes      String[] // Array of potential causes
  solutions   String[] // Array of potential solutions
  estimatedCost String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bmw_codes")
}

model Service {
  id          String   @id @default(cuid())
  name        String
  category    String   // "maintenance", "performance", "exotic"
  description String
  basePrice   Float
  duration    Int      // in minutes
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]

  @@map("services")
}

model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  vehicles     Vehicle[]
  appointments Appointment[]

  @@map("customers")
}

model Vehicle {
  id           String   @id @default(cuid())
  make         String
  model        String
  year         Int
  vin          String?  @unique
  color        String?
  mileage      Int?
  notes        String?
  customerId   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  appointments Appointment[]

  @@map("vehicles")
}

model Appointment {
  id            String            @id @default(cuid())
  date          DateTime
  duration      Int               // in minutes
  status        AppointmentStatus @default(SCHEDULED)
  notes         String?
  totalAmount   Float
  paidAmount    Float             @default(0)
  customerId    String
  vehicleId     String?
  serviceId     String
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  customer Customer @relation(fields: [customerId], references: [id])
  vehicle  Vehicle? @relation(fields: [vehicleId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])

  @@map("appointments")
}

model CodeSearch {
  id        String   @id @default(cuid())
  code      String
  ipAddress String?
  userAgent String?
  found     Boolean
  createdAt DateTime @default(now())

  @@map("code_searches")
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}